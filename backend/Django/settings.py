"""
Django settings for Django project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os #**/ os module to handle environment variables
import environ #**/ django-environ to manage environment variables

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#**/ Initialize django-environ to read environment variables from .env file
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

#**/ SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

#**/ SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

#**/ Hosts/domain names that are valid, deployed-backend-url
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

#**/ Allow React frontend to access Django backend  
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[])

#**/ CSRF trusted origins to allow cross-origin requests from the deplaoyed backend-url
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[])


# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic', #**/ WhiteNoise for serving static files in development
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "corsheaders", #**/ CORS headers to allow cross-origin requests
    "rest_framework", #**/ Django REST Framework for building APIs
    "api", #**/ Custom app for the API
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware', #**/ WhiteNoise middleware to serve static files in production
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware", #**/ CORS middleware to handle cross-origin requests
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Django.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#**/ Using django-environ to read database configuration from environment variables
DATABASES = {
    "default": env.db()
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# #**/ specify the directories where static files are present in our project
# STATICFILES_DIRS = [BASE_DIR / "backend/api/static"]


#**/ WhiteNoise storage backend to compress and manage static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

if DEBUG:
    #**/ WhiteNoise configuration to serve static files in development
    STATIC_ROOT = BASE_DIR / "backend/staticfiles"
    MEDIA_ROOT = BASE_DIR / "backend/media"
else:
    #**/ WhiteNoise configuration to serve static files in production
    STATIC_ROOT = BASE_DIR / "staticfiles"
    MEDIA_ROOT = BASE_DIR / "media"

# media files
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
